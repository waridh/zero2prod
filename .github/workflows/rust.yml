name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronized, reopened]
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.0
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker hub image
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    - name: Checkout Repository code
      uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Install sqlx-cli
      run:
        cargo install sqlx-cli
        --version=${{ env.SQLX_VERSION }}
        --features ${{ env.SQLX_FEATURES }}
        --no-default-features
        --locked
    - name: Create app user in Postgres
      run: |
        sudo apt-get install postgresql-client

        # Create the application user
        CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

        # Grant create db privbiledge to the app user
        GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"
    - name: Migrate database
      run: |
        SKIP_DOCKER=true ./scripts/init_db.sh
      
    - name: Run tests
      run: cargo test --verbose
    - name: Check that queries are fresh
      run: cargo sqlx prepare --workspace --check -- --all-target

  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Ensure rustfmt is installed and setup problem matcher
      - name: Install the rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  clippy:
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings
